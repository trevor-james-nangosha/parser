/**
 * the Tokeniser Spec
 */
const Spec = [
    // --------NUMBERS---------
    [/^\d+/, 'NUMBER'],

    //----------COMMENTS-------
    //-----single line comments
    [/^\/\/.*/, null],

    //skip multi line comments
    [/^\/\*[\s\S]*?\*\//, null],

    //--------WHITESPACE
    [/^\s+/, null],

    //---------STRINGS--------
    [/^"[^"]*"/, 'STRING'],
    [/^'[^"]*'/, 'STRING']
]

/**
 * Tokeniser class: responsible for pulling tokens from the stream generated by the parser.
 */
class Tokeniser {
    /**
     * the string gets passed into this function so that a stream of tokens is generated.
     * @param string
     */
    init(string) {
        this._string = string
        this._cursor = 0
    }

    /**
     * this function checks whether the cursor has reached the end of the file.
     * @returns 
     */
    isEOF() {
        return this._cursor === this._string.length
    }

    /**
     * this checks whether there are more tokens in the stream generated before the cursor can be moved.
     * @returns 
     */
    hasMoreTokens() {
        return this._cursor < this._string.length
    }

    /**
     * this returns the next token in the stream. If there is no token, it returns null
     * @returns 
     */
    getNextToken() {
        if (!this.hasMoreTokens()) {
            return null
        }

        const string = this._string.slice(this._cursor)

        for(const [regexp, tokenType] of Spec){
            const tokenValue = this._match(regexp, string)

            //could not match this rule. Continue.
            if(tokenValue == null){
                continue;
            }

            //Should skip token eg. whitespace.
            if(tokenType == null){
                return this.getNextToken()
            }

            return {
                type: tokenType,
                value: tokenValue
            }
        }

        
        throw new SyntaxError(`Unexpected token: "${string[0]}"`)
    }

    /**
     * Matches a token for a regular expression
     */
    _match(regexp, string){
        const matched = regexp.exec(string)
        if (matched == null){
            return null
        }
        this._cursor += matched[0].length
        return matched[0]        
    }
}

module.exports = {
    Tokeniser,
}